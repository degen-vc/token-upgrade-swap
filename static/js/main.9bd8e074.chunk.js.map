{"version":3,"sources":["networkInfo.ts","components/ConnectWallet.tsx","components/Footer.tsx","utils.ts","App.tsx","theme.ts","index.tsx"],"names":["networkInfo","kovan","chainId","name","v1TokenAddress","v2TokenAddress","tokenSwapAddress","polygon","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","process","REACT_APP_INFURA_ID","web3Modal","Web3Modal","network","cacheProvider","targetNetwork","connectWallet","setLocalProvider","openModal","setProviderIsFinal","a","ethers","providers","Web3Provider","connect","provider","getNetwork","ConnectWallet","setProvider","props","useDisclosure","isOpen","onOpen","onClose","useState","localProvider","providerIsFinal","useEffect","onClick","isCentered","colorScheme","mr","params","utils","hexValue","send","then","catch","error","console","log","switchNetwork","Social","icon","link","href","isExternal","size","Footer","colorMode","useColorMode","py","borderTop","borderTopColor","light","dark","flex","decoration","display","ExternalLink","spacing","mt","faTwitter","faGithub","faLinkedin","toDecimal","amount","decimals","amountInString","toString","length","Array","join","beforeDecimal","slice","afterDecimal","replace","numberWithCommas","number","numberAsString","numberLength","includes","startFrom","numberWithComa","comaIndex","i","formatNumber","parseFloat","toFixed","App","toggleColorMode","toast","useToast","signer","setSigner","signerAddress","setSignerAddress","BigNumber","from","amountToBridge","setAmountToBridge","v1Balance","setV1Balance","v1Token","setV1Token","setV2Token","tokenSwap","setTokenSwap","loading","setLoading","ERC20ABI","require","TokenSwapABI","Contract","getSigner","getSignerAddress","getAddress","fetchUserBalance","balanceOf","bridge","allowance","lt","approve","MaxUint256","approveTxn","wait","errorToast","tx","title","description","status","isClosable","duration","px","borderBottom","borderBottomColor","maxW","justifyContent","rounded","h","w","Moon","Sun","my","minH","minW","color","type","placeholder","autoComplete","textAlign","value","onChange","e","amt","target","parseEther","bg","isDisabled","pr","pl","isLoading","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9bd8e074.chunk.js","sourcesContent":["const networkInfo = {\n  kovan: {\n    chainId: 42,\n    name: \"Kovan Testnet\",\n    v1TokenAddress: \"0x5437e4760899a2eed8782d65f5A4917DEA866b62\",\n    v2TokenAddress: \"0xd8Bd8148F24B96eF136929ffe3D371a7A3138F7e\",\n    tokenSwapAddress: \"0x217A6e7Dd5d84faFd292f741a0dcF7591aC1F6E1\",\n  },\n  polygon: {\n    chainId: 137,\n    name: \"Polygon Mainnet\",\n    v1TokenAddress: \"0x000000000000000000000000000000000000dEaD\",\n    v2TokenAddress: \"0x000000000000000000000000000000000000dEaD\",\n    tokenSwapAddress: \"0x000000000000000000000000000000000000dEaD\",\n  },\n};\n\nexport default networkInfo;\n","import { useState, useEffect } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { ethers } from \"ethers\";\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDisclosure,\n  Box,\n} from \"@chakra-ui/react\";\nimport { setProvider } from \"../types\";\nimport networkInfo from \"../networkInfo\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider, // required\n    options: {\n      infuraId: process.env.REACT_APP_INFURA_ID, // required\n    },\n  },\n};\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // optional\n  cacheProvider: false, // optional\n  providerOptions, // required\n});\n\nexport const targetNetwork = networkInfo.kovan;\n\nconst connectWallet = async (\n  setLocalProvider: setProvider,\n  openModal: any,\n  setProviderIsFinal: any\n) => {\n  const provider = new ethers.providers.Web3Provider(await web3Modal.connect());\n\n  const chainId = await (await provider.getNetwork()).chainId;\n  if (chainId !== targetNetwork.chainId) {\n    openModal();\n    setLocalProvider(provider);\n  } else {\n    setLocalProvider(provider);\n    setProviderIsFinal(true);\n  }\n};\n\nconst ConnectWallet = ({\n  setProvider,\n  ...props\n}:\n  | {\n      setProvider: setProvider;\n    }\n  | any) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [localProvider, setLocalProvider] = useState<any>();\n  const [providerIsFinal, setProviderIsFinal] = useState(false);\n\n  const switchNetwork = () => {\n    const params = {\n      chainId: ethers.utils.hexValue(targetNetwork.chainId),\n    };\n\n    localProvider\n      .send(\"wallet_switchEthereumChain\", [params])\n      .then(async () => {\n        // ethers providers are immutable so need to instantiate a new one\n        setLocalProvider(\n          new ethers.providers.Web3Provider(await web3Modal.connect())\n        );\n        setProviderIsFinal(true);\n      })\n      .catch((error: any) => console.log(error));\n  };\n\n  useEffect(() => {\n    if (providerIsFinal) {\n      setProvider(localProvider);\n    }\n  }, [providerIsFinal]);\n\n  return (\n    <>\n      <Button\n        onClick={() =>\n          connectWallet(setLocalProvider, onOpen, setProviderIsFinal)\n        }\n        {...props}\n      >\n        Connect Wallet\n      </Button>\n      <Modal isOpen={isOpen} onClose={onClose} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Incorrect Network</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            Press OK to switch to {targetNetwork.name} & use this DApp\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={() => switchNetwork()}>\n              OK\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ConnectWallet;\n","import React from \"react\";\nimport {\n  useColorMode,\n  Flex,\n  HStack,\n  VStack,\n  Heading,\n  Spacer,\n  Link,\n  Text,\n} from \"@chakra-ui/react\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faGithub,\n  faLinkedin,\n  faTwitter,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Social = ({ icon, link }: any) => {\n  return (\n    <Link href={link} isExternal>\n      <FontAwesomeIcon icon={icon} size=\"lg\" />\n    </Link>\n  );\n};\n\nfunction Footer() {\n  const { colorMode } = useColorMode();\n  const underlineColor = { light: \"gray.500\", dark: \"gray.400\" };\n\n  return (\n    <Flex py=\"4\" borderTop=\"2px\" borderTopColor={underlineColor[colorMode]}>\n      <Spacer flex=\"1\" />\n      <VStack>\n        <Heading size=\"md\">\n          Built by:{\" \"}\n          <Link href=\"https://apoorvlathey.com/\" isExternal>\n            <Text decoration=\"underline\" display=\"inline\">\n              Apoorv Lathey\n            </Text>{\" \"}\n            <ExternalLinkIcon />\n          </Link>\n        </Heading>\n        <HStack spacing={8} mt={10}>\n          <Social icon={faTwitter} link=\"https://twitter.com/apoorvlathey\" />\n          <Social icon={faGithub} link=\"https://github.com/CodinMaster\" />\n          <Social\n            icon={faLinkedin}\n            link=\"https://www.linkedin.com/in/apoorvlathey/\"\n          />\n        </HStack>\n      </VStack>\n      <Spacer flex=\"1\" />\n    </Flex>\n  );\n}\n\nexport default Footer;\n","import { BigNumber } from \"@ethersproject/bignumber\";\n\nexport const slicedAddress = (address: string) => {\n  return `${address.slice(0, 6)}...${address.slice(\n    address.length - 4,\n    address.length\n  )}`;\n};\n\nexport const toDecimal = (amount: BigNumber | string, decimals: number) => {\n  let amountInString = amount.toString();\n  if (amountInString.length <= decimals) {\n    const pad = Array(decimals + 1 - amountInString.length + 1).join(\"0\");\n    amountInString = pad + amountInString;\n  }\n\n  const beforeDecimal = amountInString.slice(0, -decimals);\n  const afterDecimal = amountInString.slice(-decimals).replace(/0+$/, \"\"); // replaces trailing zeroes\n  let output =\n    afterDecimal.length > 0\n      ? beforeDecimal + \".\" + afterDecimal\n      : beforeDecimal;\n\n  return output;\n};\n\nexport const numberWithCommas = (number: string | number | BigNumber) => {\n  const numberAsString = number.toString();\n  const numberLength = numberAsString.length; \n  if(numberLength < 4 || numberAsString.includes('.')){\n    return numberAsString;\n  }\n  const startFrom = numberLength%3;\n  let numberWithComa = '';\n  let comaIndex = 0;\n  for(let i = 0; i < numberLength;i++){\n    if(startFrom === i || i !== 0 && comaIndex === 3){\n      numberWithComa += ',' + numberAsString[i];\n      comaIndex = 1;\n    }else{\n      numberWithComa += numberAsString[i];\n      comaIndex++\n    }\n  }\n  return numberWithComa;\n}\n\nexport const formatNumber = (\n  number: BigNumber | string,\n  decimals: number = 18\n) => {\n  if (decimals === 0) {\n    return numberWithCommas(number.toString());\n  }\n\n  return numberWithCommas(parseFloat(toDecimal(number, decimals)).toFixed(4));\n};\n","import { useState, useEffect } from \"react\";\nimport {\n  Button,\n  useColorMode,\n  Flex,\n  Heading,\n  Spacer,\n  Container,\n  FormControl,\n  FormLabel,\n  InputGroup,\n  Input,\n  Center,\n  useToast,\n  Image,\n  Box,\n  Link,\n  Text,\n  VStack,\n  InputRightElement,\n  HStack,\n} from \"@chakra-ui/react\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { SunIcon, MoonIcon } from \"@chakra-ui/icons\";\nimport ConnectWallet, { targetNetwork } from \"./components/ConnectWallet\";\nimport { Contract, ethers, BigNumber } from \"ethers\";\nimport { Web3Provider, Signer } from \"./types\";\nimport Footer from \"./components/Footer\";\nimport { formatNumber, toDecimal } from \"./utils\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { MaxUint256 } from \"@ethersproject/constants\";\n\nfunction App() {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const underlineColor = { light: \"gray.500\", dark: \"gray.400\" };\n  const bgColor = { light: \"white\", dark: \"gray.700\" };\n  const toast = useToast();\n\n  const [provider, setProvider] = useState<Web3Provider>();\n  const [signer, setSigner] = useState<Signer>();\n  const [signerAddress, setSignerAddress] = useState<string>();\n  const [amountToBridge, setAmountToBridge] = useState<BigNumber>(\n    BigNumber.from(0)\n  );\n  const [v1Balance, setV1Balance] = useState<BigNumber>(BigNumber.from(0));\n\n  const [v1Token, setV1Token] = useState<Contract>();\n  const [v2Token, setV2Token] = useState<Contract>();\n  const [tokenSwap, setTokenSwap] = useState<Contract>();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { v1TokenAddress, v2TokenAddress, tokenSwapAddress } = targetNetwork;\n\n  const ERC20ABI = require(\"./abi/ERC20.json\");\n  const TokenSwapABI = require(\"./abi/TokenSwap.json\");\n\n  // Initialize Contracts\n  useEffect(() => {\n    if (provider) {\n      setV1Token(new ethers.Contract(v1TokenAddress, ERC20ABI, provider));\n      setV2Token(new ethers.Contract(v2TokenAddress, ERC20ABI, provider));\n      setTokenSwap(\n        new ethers.Contract(tokenSwapAddress, TokenSwapABI, provider)\n      );\n\n      setSigner(provider.getSigner(0));\n    }\n  }, [provider]);\n\n  // Get signer address\n  useEffect(() => {\n    const getSignerAddress = async () => {\n      if (signer) {\n        setSignerAddress(await signer.getAddress());\n      }\n    };\n\n    getSignerAddress();\n  }, [signer]);\n\n  useEffect(() => {\n    if (signerAddress) {\n      fetchUserBalance();\n    }\n  }, [signerAddress]);\n\n  const fetchUserBalance = async () => {\n    setV1Balance(await v1Token!.balanceOf(signerAddress));\n  };\n\n  const bridge = async () => {\n    setLoading(true);\n\n    const allowance = await v1Token!.allowance(signerAddress, tokenSwapAddress);\n    if (allowance.lt(amountToBridge)) {\n      try {\n        const approveTxn = await v1Token!\n          .connect(signer!)\n          .approve(tokenSwapAddress, MaxUint256);\n        await approveTxn.wait();\n      } catch {\n        errorToast(\"Can't Approve\");\n        setLoading(false);\n        return;\n      }\n    }\n    try {\n      const tx = await tokenSwap!.connect(signer!).bridge(amountToBridge);\n      await tx.wait();\n      await fetchUserBalance();\n    } catch {\n      errorToast(\"Can't Bridge\");\n    }\n    setLoading(false);\n  };\n\n  const errorToast = (title: string, description: string = \"\") => {\n    toast({\n      title,\n      description,\n      status: \"error\",\n      isClosable: true,\n      duration: 3000,\n    });\n  };\n\n  return (\n    <>\n      <Flex\n        py=\"4\"\n        px={[\"2\", \"4\", \"10\", \"10\"]}\n        borderBottom=\"2px\"\n        borderBottomColor={underlineColor[colorMode]}\n      >\n        <Spacer flex=\"1\" />\n        <Heading maxW={[\"302px\", \"4xl\", \"4xl\", \"4xl\"]}>\n          Bridge V1 {\"->\"} V2 Tokens\n        </Heading>\n        <Flex flex=\"1\" justifyContent=\"flex-end\">\n          <Button onClick={toggleColorMode} rounded=\"full\" h=\"40px\" w=\"40px\">\n            {colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n          </Button>\n        </Flex>\n      </Flex>\n      <Container my=\"16\" minH=\"md\" minW={[\"0\", \"0\", \"2xl\", \"2xl\"]}>\n        <FormControl>\n          <FormLabel>\n            <HStack>\n              <Text>Enter V1 Token Amount to Bridge</Text>\n              <Spacer />\n              <Text color=\"gray.300\">\n                Balance: {formatNumber(v1Balance, 18)}\n              </Text>\n            </HStack>\n          </FormLabel>\n          <InputGroup>\n            <Input\n              type=\"number\"\n              aria-label=\"v1-token-amount\"\n              placeholder=\"0\"\n              autoComplete=\"off\"\n              textAlign=\"right\"\n              value={toDecimal(amountToBridge, 18)}\n              onChange={(e) => {\n                let amt = e.target.value;\n                if (!amt) amt = \"0\";\n                setAmountToBridge(parseEther(amt));\n              }}\n              bg={bgColor[colorMode]}\n              isDisabled={!signerAddress}\n              pr=\"5.5rem\"\n            />\n            <InputRightElement w=\"4.5rem\" mr=\"0.1rem\">\n              <Button\n                h=\"1.75rem\"\n                size=\"sm\"\n                onClick={() => setAmountToBridge(v1Balance)}\n                isDisabled={!signerAddress}\n              >\n                Max\n              </Button>\n            </InputRightElement>\n          </InputGroup>\n        </FormControl>\n        {signerAddress && (\n          <Center pl=\"1rem\">\n            <Button\n              isLoading={loading}\n              pl=\"1rem\"\n              mt=\"1rem\"\n              onClick={() => {\n                bridge();\n              }}\n            >\n              Bridge 🔁\n            </Button>\n          </Center>\n        )}\n        <Center>\n          {!provider && <ConnectWallet mt=\"10rem\" setProvider={setProvider} />}\n        </Center>\n      </Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","import { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: true,\n};\n\nconst theme = extendTheme({\n  config,\n});\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <ChakraProvider theme={theme}>\n    <App />\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}